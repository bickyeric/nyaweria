// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go
//
// Generated by this command:
//
//	mockgen -source=notification.go -destination=mock/notification.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/bickyeric/nyaweria/entity"
	websocket "github.com/gorilla/websocket"
	gomock "go.uber.org/mock/gomock"
)

// MockNotification is a mock of Notification interface.
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
	isgomock struct{}
}

// MockNotificationMockRecorder is the mock recorder for MockNotification.
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance.
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNotification) Add(ctx context.Context, ws *websocket.Conn, username string) (*entity.WebSocketPubsubClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, ws, username)
	ret0, _ := ret[0].(*entity.WebSocketPubsubClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockNotificationMockRecorder) Add(ctx, ws, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNotification)(nil).Add), ctx, ws, username)
}

// Delete mocks base method.
func (m *MockNotification) Delete(ctx context.Context, username string, conn *entity.WebSocketPubsubClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, username, conn)
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationMockRecorder) Delete(ctx, username, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotification)(nil).Delete), ctx, username, conn)
}

// Send mocks base method.
func (m *MockNotification) Send(arg0 context.Context, arg1 entity.Donation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNotificationMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotification)(nil).Send), arg0, arg1)
}
