// Code generated by MockGen. DO NOT EDIT.
// Source: donate.go
//
// Generated by this command:
//
//	mockgen -source=donate.go -destination=mock/donate.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/bickyeric/nyaweria/entity"
	repository "github.com/bickyeric/nyaweria/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockDonate is a mock of Donate interface.
type MockDonate struct {
	ctrl     *gomock.Controller
	recorder *MockDonateMockRecorder
	isgomock struct{}
}

// MockDonateMockRecorder is the mock recorder for MockDonate.
type MockDonateMockRecorder struct {
	mock *MockDonate
}

// NewMockDonate creates a new mock instance.
func NewMockDonate(ctrl *gomock.Controller) *MockDonate {
	mock := &MockDonate{ctrl: ctrl}
	mock.recorder = &MockDonateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDonate) EXPECT() *MockDonateMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDonate) Create(ctx context.Context, record *entity.Donation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDonateMockRecorder) Create(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDonate)(nil).Create), ctx, record)
}

// Summary mocks base method.
func (m *MockDonate) Summary(ctx context.Context, req repository.SummaryRequest) ([]*entity.DonationSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary", ctx, req)
	ret0, _ := ret[0].([]*entity.DonationSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summary indicates an expected call of Summary.
func (mr *MockDonateMockRecorder) Summary(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockDonate)(nil).Summary), ctx, req)
}
